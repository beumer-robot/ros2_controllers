swerve_drive_controller:
  wheel_names: {
    type: string_array,
    default_value: [],
    description: "Link names of the wheels",
  }
  holder_names: {
    type: string_array,
    default_value: [],
    description: "Link names of the holders",
  }
  wheel_radius: {
    type: double,
    default_value: 0.0,
    description: "Radius of a wheel, i.e., wheels size, used for transformation of linear velocity into wheel rotations. If this parameter is wrong the robot will move faster or slower then expected.",
  }
  wheel_positions:
    x: {
      type: double_array,
      default_value: [],
      description: "Positions of the wheels in the robot frame. The order of the wheels should be the same as in ``wheel_names``.",
    }
    y: {
      type: double_array,
      default_value: [],
      description: "Positions of the wheels in the robot frame. The order of the wheels should be the same as in ``wheel_names``.",
    }
  wheel_limits:
    limitless: {
      type: bool_array,
      default_value: [false, false, false, false],
      description: "If set to true the motors will be controlled without any rotational limits.",
    }
    max_rot_angle: {
      type: double_array,
      default_value: [0.0, 0.0, 0.0, 0.0],
      description: "Maximum rotation angle (radians) of the wheels. If ``limitless`` is set to true this parameter is ignored.",
    }
    min_rot_angle: {
      type: double_array,
      default_value: [0.0, 0.0, 0.0, 0.0],
      description: "Minimum rotation angle (radians) of the wheels. If ``limitless`` is set to true this parameter is ignored.",
    }
  odom_frame_id: {
    type: string,
    default_value: "odom",
    description:  "Name of the frame for odometry. This frame is parent of ``base_frame_id`` when controller publishes odometry.",
  }
  base_frame_id: {
    type: string,
    default_value: "base_link",
    description: "Name of the robot's base frame that is child of the odometry frame.",
  }
  pose_covariance_diagonal: {
    type: double_array,
    default_value: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    description: "Odometry covariance for the encoder output of the robot for the pose. These values should be tuned to your robot's sample odometry data, but these values are a good place to start: ``[0.001, 0.001, 0.001, 0.001, 0.001, 0.01]``.",
  }
  twist_covariance_diagonal: {
    type: double_array,
    default_value: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    description: "Odometry covariance for the encoder output of the robot for the speed. These values should be tuned to your robot's sample odometry data, but these values are a good place to start: ``[0.001, 0.001, 0.001, 0.001, 0.001, 0.01]``.",
  }
  open_loop: {
    type: bool,
    default_value: false,
    description: "If set to true the odometry of the robot will be calculated from the commanded values and not from feedback.",
  }
  position_feedback: {
    type: bool,
    default_value: true,
    description: "Is there a position feedback from hardware. If set to false the odometry of the robot will be calculated from the commanded values and not from feedback.",
  }
  publish_wheel_joint_controller_state_: {
    type: bool,
    default_value: false,
    description: "Publish state of the wheel joint controller.",
  }
  infinity_tolerance: {
    type: double,
    default_value: 1000.0,
    description: "Tolerance for considering the robot as stopped. If the robot's linear or angular speed is below this value, the robot is considered as stopped.",
  }
  intersection_tolerance: {
    type: double,
    default_value: 0.1,
    description: "Tolerance for considering the robot as stopped. If the robot's linear or angular speed is below this value, the robot is considered as stopped.",
  }
  enable_odom_tf: {
    type: bool,
    default_value: true,
    description: "Publish transformation between ``odom_frame_id`` and ``base_frame_id``.",
  }
  cmd_vel_timeout: {
    type: double,
    default_value: 0.5, # seconds
    description: "Timeout after which input command on ``cmd_vel`` topic is considered staled.",
  }
  publish_limited_velocity: {
    type: bool,
    default_value: false,
    description: "Publish limited velocity value.",
  }
  velocity_rolling_window_size: {
    type: int,
    default_value: 10,
    description: "Size of the rolling window for calculation of mean velocity use in odometry.",
  }
  use_stamped_vel: {
    type: bool,
    default_value: true,
    description: "Use stamp from input velocity message to calculate how old the command actually is.",
  }
  publish_rate: {
    type: double,
    default_value: 50.0, # Hz
    description: "Publishing rate (Hz) of the odometry and TF messages.",
  }
  linear:
    x:
      has_velocity_limits: {
        type: bool,
        default_value: false,
      }
      has_acceleration_limits: {
        type: bool,
        default_value: false,
      }
      has_jerk_limits: {
        type: bool,
        default_value: false,
      }
      max_velocity: {
        type: double,
        default_value: .NAN,
      }
      min_velocity: {
        type: double,
        default_value: .NAN,
      }
      max_acceleration: {
        type: double,
        default_value: .NAN,
      }
      min_acceleration: {
        type: double,
        default_value: .NAN,
      }
      max_jerk: {
        type: double,
        default_value: .NAN,
      }
      min_jerk: {
        type: double,
        default_value: .NAN,
      }
    y:
      has_velocity_limits: {
        type: bool,
        default_value: false,
      }
      has_acceleration_limits: {
        type: bool,
        default_value: false,
      }
      has_jerk_limits: {
        type: bool,
        default_value: false,
      }
      max_velocity: {
        type: double,
        default_value: .NAN,
      }
      min_velocity: {
        type: double,
        default_value: .NAN,
      }
      max_acceleration: {
        type: double,
        default_value: .NAN,
      }
      min_acceleration: {
        type: double,
        default_value: .NAN,
      }
      max_jerk: {
        type: double,
        default_value: .NAN,
      }
      min_jerk: {
        type: double,
        default_value: .NAN,
      }
  angular:
    z:
      has_velocity_limits: {
        type: bool,
        default_value: false,
      }
      has_acceleration_limits: {
        type: bool,
        default_value: false,
      }
      has_jerk_limits: {
        type: bool,
        default_value: false,
      }
      max_velocity: {
        type: double,
        default_value: .NAN,
      }
      min_velocity: {
        type: double,
        default_value: .NAN,
      }
      max_acceleration: {
        type: double,
        default_value: .NAN,
      }
      min_acceleration: {
        type: double,
        default_value: .NAN,
      }
      max_jerk: {
        type: double,
        default_value: .NAN,
      }
      min_jerk: {
        type: double,
        default_value: .NAN,
      }
